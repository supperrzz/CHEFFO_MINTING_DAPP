{"version":3,"sources":["connect.js","components/mintCard.js","components/accordion.js","App.js","reportWebVitals.js","index.js"],"names":["Connect","userState","setUserState","class","alt","src","disabled","onClick","e","preventDefault","MintCard","SmartContract","img","useState","feedback","setFeedback","smartContractData","setSmartContractData","mintAmount","setMintAmount","connected","setConnected","loading","setloading","blockchain","setBlockchain","useEffect","undefined","smartContract","fetchData","a","methods","name","call","maxSupply","cost","totalSupply","maxMintAmount","symbol","paused","errorMsg","message","connect","window","ethereum","isMetaMask","Web3EthContract","setProvider","web3","Web3","request","method","accounts","networkId","abi","address","network","networkName","Number","SmartContractObj","account","on","prev","location","reload","console","log","claimNFTs","mint","send","from","value","utils","toWei","toString","once","err","code","then","receipt","id","type","min","max","defaultValue","onChange","target","step","Accordion","title","children","isOpen","setOpen","className","FAQ","href","rel","App","SmartContract2","SmartContract3","SmartContract4","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"y73BAAaA,EAAU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAEnC,OACE,qBAAKC,MAAM,UAAX,SACE,sBAAKA,MAAM,kBAAX,UACA,qBAAKC,IAAI,aAAaC,IAAI,oJACxB,wBACEC,SAAwB,kBAAdL,EACVM,QAAS,SAACC,GACRA,EAAEC,iBACFP,EAAa,UAJjB,sCASe,kBAAdD,GAAiC,4E,sECX7BS,EAAW,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,cAAeC,EAAkC,EAAlCA,IAAKV,EAA6B,EAA7BA,aAC5C,GADyE,EAAfD,UAC1BY,mBAAS,YAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkDF,mBAAS,IAA3D,mBAAOG,EAAP,KAA0BC,EAA1B,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAoCV,mBAAS,IAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,gBACyBC,IAA7BH,EAAWI,eACbC,MAED,IAEHH,qBAAU,WACRG,MACC,CAACL,IAEJ,IAAMK,EAAS,uCAAG,wCAAAC,EAAA,+EAEGN,EAAWI,cAAcG,QAAQC,OAC/CC,OAHW,cAEVD,EAFU,gBAIQR,EAAWI,cAAcG,QAAQG,YACpDD,OALW,cAIVC,EAJU,gBAMGV,EAAWI,cAAcG,QAAQI,OAC/CF,OAPW,cAMVE,EANU,iBAQUX,EAAWI,cAAcG,QAAQK,cACtDH,OATW,eAQVG,EARU,iBAUYZ,EAAWI,cAAcG,QAAQM,gBACxDJ,OAXW,eAUVI,EAVU,iBAYKb,EAAWI,cAAcG,QAAQO,SACjDL,OAbW,eAYVK,EAZU,iBAcKd,EAAWI,cAAcG,QAAQQ,SACjDN,OAfW,QAcVM,EAdU,OAgBdtB,EAAqB,CACnBe,OACAI,cACAD,OACAD,YACAG,gBACAC,SACAC,WAEFhB,GAAW,GACXF,GAAa,GA1BC,kDA4BdJ,EAAqB,CAAEuB,SAAU,KAAIC,UA5BvB,0DAAH,qDAgCTC,EAAO,uCAAG,4CAAAZ,EAAA,yDACdP,GAAW,GADG,EAEOoB,OAAbC,EAFM,EAENA,WACoBA,GAAYA,EAASC,YAHnC,wBAKZC,IAAgBC,YAAYH,GACxBI,EAAO,IAAIC,IAAKL,GANR,kBAQaA,EAASM,QAAQ,CACtCC,OAAQ,wBATA,cAQJC,EARI,iBAWcR,EAASM,QAAQ,CACvCC,OAAQ,gBAZA,QAWJE,EAXI,OAgBRC,EAIE3C,EAJF2C,IACAC,EAGE5C,EAHF4C,QACAC,EAEE7C,EAFF6C,QAEE7C,EADF8C,YAIEC,OAAOL,KAAeG,GAClBG,EAAmB,IAAIb,IAC3BQ,EACAC,GAIF9B,EAAc,CACZmC,QAASR,EAAS,GAClBxB,cAAe+B,EACfX,KAAMA,IAIRJ,EAASiB,GAAG,mBAAmB,SAACT,GAC9BrC,EAAY,WACZU,GAAc,SAAAqC,GAAI,kCACbA,GADa,IAEhBF,QAASR,EAAS,YAMtBlD,EAAa,iBAGf0C,EAASiB,GAAG,gBAAgB,WAC1BlB,OAAOoB,SAASC,YAnDR,kDAsDVC,QAAQC,IAAR,MACAzC,EAAc,CACZe,SAAS,EAAD,KAxDA,gCA4DZf,EAAc,CACZe,SAAU,qBA7DA,0DAAH,qDA0GL2B,EAAY,SAACjD,GACjBH,EAAY,cACZS,EAAWI,cAAcG,QAC1BqC,KAAKlD,GACLmD,KAAK,CAEJC,KAAM9C,EAAWoC,QACjBW,MAAO/C,EAAWwB,KAAKwB,MAAMC,OAAOzD,EAAkBmB,KAAOjB,GAAYwD,WAAY,WAEtFC,KAAK,SAAS,SAACC,GACdX,QAAQC,IAAIU,GACC,OAAbA,EAAIC,KAAgB9D,EAAY,WAAaA,EAAY,4BAE1D+D,MAAK,SAACC,GACLhE,EAAY,yBAIhB,OACE,sBAAKZ,MAAM,YAAX,WACiB,IAAdiB,GAAsB,sDAAuBJ,EAAkBoB,YAAzC,YAAwDpB,EAAkBkB,cAClF,IAAdd,GAAuB,qDACxB,qBAAKf,IAAKO,EAAKR,IAAI,gBACnB,oBAAID,MAAM,WAAV,SAAsBW,KA9DP,IAAdM,EAEC,wBACEb,QAAS,SAACC,GACRA,EAAEC,iBACFiC,IACAb,KAJJ,qBAYA,gCACE,kCACE,uBACEmD,GAAG,UACHC,KAAK,QACLC,IAAI,IAAIC,IAAKnE,EAAkBqB,cAC/B+C,aAAclE,EACdmE,SAAU,SAAC7E,GAAD,OAAOW,EAAcX,EAAE8E,OAAOf,QACxCgB,KAAK,MACP,oBAAIpF,MAAM,cAAV,SAAyBe,OAE3B,wBACEf,MAAM,cACNI,QAAS,SAACC,GACRA,EAAEC,iBACF0D,EAAUjD,IAJd,yBAuCHI,EAAU,mBAAGnB,MAAM,UAAT,wBAAoC,OCvLxCqF,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACjC,EAA0B7E,oBAAS,GAAnC,mBAAO8E,EAAP,KAAeC,EAAf,KACA,OACE,sBAAKC,UAAU,oBAAf,UACE,qBACEA,UAAS,0BAAqBF,EAAS,OAAS,IAChDpF,QAAS,kBAAMqF,GAASD,IAF1B,SAIE,6BAAKF,MAEP,qBAAKI,UAAS,yBAAqBF,EAAuB,GAAd,aAA5C,SACE,qBAAKE,UAAU,oBAAf,SAAoCH,UAM/BI,EAAM,kBACjB,sBAAKD,UAAU,UAAf,UACE,cAAC,EAAD,CAAWJ,MAAM,wBAAjB,SACA,+BACE,6BAAI,mBAAGtF,MAAM,GAAT,uDACJ,6BAAI,uCAAS,mBAAG4F,KAAK,oCAAoCT,OAAO,SAASU,IAAI,aAAhE,uCAAT,wDACJ,6BAAI,2EACJ,6BAAI,uCAAS,mBAAGD,KAAK,wBAAwBT,OAAO,SAASU,IAAI,aAApD,uBAAT,0DACJ,6BAAI,yHACJ,6BAAI,gLAGN,cAAC,EAAD,CAAWP,MAAM,UAAjB,SACE,+BACE,6BAAI,gHACJ,6BAAI,wDACJ,6BAAI,kGACJ,6BAAI,+DAGR,cAAC,EAAD,CAAWA,MAAM,qBAAjB,SACE,+BACE,2GACA,6FACA,uFACA,iEACA,2KACA,gG,oCCqBOQ,MAxDf,WACE,MAAkCpF,mBAAS,SAA3C,mBAAOZ,EAAP,KAAkBC,EAAlB,KA8BA,OACE,qCACE,sBAAKC,MAAM,MAAX,UACE,sBAAKA,MAAM,UAAX,UACE,mBAAG4F,KAAK,wBAAR,SACE,qBAAK1F,IAAI,qIAAqID,IAAI,SAASD,MAAM,WAEnK,+BACE,oBAAIA,MAAM,OAAV,SAAiB,mBAAG4F,KAAK,IAAR,0BACjB,oBAAI5F,MAAM,OAAV,SAAiB,mBAAG4F,KAAK,4BAAR,kBACjB,oBAAI5F,MAAM,OAAV,SAAiB,mBAAG4F,KAAK,mCAAR,0BACjB,oBAAI5F,MAAM,OAAV,SAAiB,mBAAG4F,KAAK,uCAAR,sBAEnB,mBAAGA,KAAK,2BAA2B5F,MAAM,mBAAzC,SAA4D,sBAAMA,MAAM,MAAZ,0BAxChD,UAAdF,EACK,cAAC,EAAD,CAASA,UAAWA,EAAWC,aAAcA,IAGlD,qCACE,qBAAKC,MAAM,eAAX,SACA,qBAAKC,IAAI,aAAaC,IAAI,sJAE1B,sBAAK2E,GAAG,OAAO7E,MAAM,eAArB,UACE,iDACA,oBAAIA,MAAM,UAAV,mIACA,sBAAK0F,UAAU,OAAf,UACE,cAAC,EAAD,CAAU3F,aAAcA,EAAcS,cAAeA,EAAeC,IAAI,qIACxE,cAAC,EAAD,CAAUV,aAAcA,EAAcS,cAAeuF,EAAgBtF,IAAI,kIACzE,cAAC,EAAD,CAAUV,aAAcA,EAAcS,cAAewF,EAAgBvF,IAAI,uIACzE,cAAC,EAAD,CAAUV,aAAcA,EAAcS,cAAeyF,EAAgBxF,IAAI,wIAG7E,sBAAKT,MAAM,cAAX,UACE,8CACA,cAAC,EAAD,aAwBN,yBAAQA,MAAM,SAAd,UACE,qBAAKE,IAAI,qIAAqID,IAAI,SAASD,MAAM,SACjK,2DCjDOkG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,cCAdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.be03ca4d.chunk.js","sourcesContent":["export const Connect = ({ userState, setUserState }) => {\n\n  return (\n    <div class=\"connect\">\n      <div class=\"section connect\">\n      <img alt=\"Cookie box\" src=\"https://images.squarespace-cdn.com/content/v1/617ce6e6e7be6e72e51086cc/b926389b-1ea7-4b14-a935-0908171b104f/cookie+box+logo-+2.png?format=2500w\"/>\n        <button\n          disabled={userState === \"WRONG_NETWORK\"}\n          onClick={(e) => {\n            e.preventDefault();\n            setUserState(\"ENTER\");\n          }}\n        >\n          [ ENTER THE COOKIE BOX ]\n        </button>\n        {userState === \"WRONG_NETWORK\" && <h5>Please switch to the Polygon network</h5>}\n      </div>\n    </div>\n  )\n}","import React, { useEffect, useState } from \"react\";\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\n\nexport const MintCard = ({SmartContract, img, setUserState, userState}) => {\n  const [feedback, setFeedback] = useState(`2 MATIC`);\n  const [smartContractData, setSmartContractData] = useState({});\n  const [mintAmount, setMintAmount] = useState(1);\n  const [connected, setConnected] = useState(false);\n  const [loading, setloading] = useState(false);\n  const [blockchain, setBlockchain] = useState({});\n\n  useEffect(() => {\n    if (blockchain.smartContract !== undefined) {\n      fetchData(); \n    }\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, [blockchain]);\n  \n  const fetchData = async () => {\n    try {\n      let name = await blockchain.smartContract.methods.name()\n        .call();\n      let maxSupply = await blockchain.smartContract.methods.maxSupply()\n        .call();\n      let cost = await blockchain.smartContract.methods.cost()\n        .call();\n      let totalSupply = await blockchain.smartContract.methods.totalSupply()\n        .call();\n      let maxMintAmount = await blockchain.smartContract.methods.maxMintAmount()\n        .call();\n      let symbol = await blockchain.smartContract.methods.symbol()\n        .call();\n      let paused = await blockchain.smartContract.methods.paused()\n        .call();\n      setSmartContractData({\n        name,\n        totalSupply,\n        cost,\n        maxSupply,\n        maxMintAmount,\n        symbol,\n        paused,\n      })\n      setloading(false)\n      setConnected(true)\n    } catch (err) {\n      setSmartContractData({ errorMsg: err.message});\n    }\n  };\n\n  const connect = async () => {\n    setloading(true)\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        \n        const { \n          abi, \n          address, \n          network, \n          networkName \n        } = SmartContract\n        \n        // If on the correct chain\n        if (Number(networkId) === network) {\n          const SmartContractObj = new Web3EthContract(\n            abi,\n            address\n          );\n \n          // Set blockchain state\n          setBlockchain({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3\n          })\n    \n          // Metamask account changes\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            setFeedback(`2 MATIC`);\n            setBlockchain(prev => ({\n              ...prev,\n              account: accounts[0],\n            })\n            )\n          });\n        } else {\n          // On the wrong network)\n          setUserState(\"WRONG_NETWORK\")\n        };\n        // User changes Metamask chain\n        ethereum.on(\"chainChanged\", () => {\n          window.location.reload();\n        });\n      } catch (err) {\n        console.log(err);\n        setBlockchain({\n          errorMsg: err\n        });\n      }\n    } else {\n      setBlockchain({\n        errorMsg: \"Install Metamask\"\n      });\n    }\n  };\n\n  const cardButton = () => {\n    if(connected !== true) {\n      return (\n        <button\n          onClick={(e) => {\n            e.preventDefault();\n            connect();\n            fetchData();\n          }}\n        >\n          CONNECT\n        </button>\n      )\n    } else {\n      return (\n        <div>\n          <label>\n            <input \n              id=\"typeinp\" \n              type=\"range\" \n              min=\"1\" max={smartContractData.maxMintAmount}\n              defaultValue={mintAmount} \n              onChange={(e) => setMintAmount(e.target.value)}\n              step=\"1\"/>\n            <h3 class=\"mint-amount\">{mintAmount}</h3>\n          </label>\n          <button\n            class=\"mint-button\"\n            onClick={(e) => {\n              e.preventDefault();\n              claimNFTs(mintAmount);\n            }}\n          >\n          MINT NOW\n          </button>\n        </div>\n      )\n    }\n  }\n    \n    const claimNFTs = (mintAmount) => {\n      setFeedback(`Minting...`);\n      blockchain.smartContract.methods\n    .mint(mintAmount)\n    .send({\n      // gasLimit: \"285000\",\n      from: blockchain.account,\n      value: blockchain.web3.utils.toWei((smartContractData.cost * mintAmount).toString(), \"ether\"),\n    })\n    .once(\"error\", (err) => {\n      console.log(err);\n      err.code === 4001 ? setFeedback(`2 MATIC`) : setFeedback(`Something went wrong.`);\n    })\n    .then((receipt) => {\n      setFeedback(`Minting complete!`);\n    });\n  };\n\n  return (\n    <div class=\"mint-card\">\n      {connected === true && <h3>{`AMOUNT MINTED: ${smartContractData.totalSupply}/${smartContractData.maxSupply}`}</h3>}\n      {connected === false && <h3>CONNECT YOUR WALLET</h3>}\n      <img src={img} alt=\"Placeholder\"/>\n      <h3 class=\"feedback\">{feedback}</h3>\n      {cardButton()}\n      {loading ? <p class=\"loading\">Loading...</p> : \"\"}\n    </div>\n  )\n}","import { React, useState } from 'react';\n\nexport const Accordion = ({ title, children }) => {\n  const [isOpen, setOpen] = useState(false);\n  return (\n    <div className=\"accordion-wrapper\">\n      <div\n        className={`accordion-title ${isOpen ? \"open\" : \"\"}`}\n        onClick={() => setOpen(!isOpen)}\n        >\n        <h3>{title}</h3>\n      </div>\n      <div className={`accordion-item ${!isOpen ? \"collapsed\" : \"\"}`}>\n        <div className=\"accordion-content\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport const FAQ = () => (\n  <div className=\"wrapper\">\n    <Accordion title=\"1. Connect to Polygon\">\n    <ul>\n      <li><p class=\"\">Load Metamask with Ethereum and Matic. </p></li>\n      <li><p>Go to <a href=\"https://wallet.polygon.technology\" target=\"_blank\" rel=\"noreferrer\">wallet.polygon.technology</a> to perform a bridge to the Polygon Blockchain. </p></li>\n      <li><p>Bridge Matic to the Polygon Blockchain. </p></li>\n      <li><p>Go to <a href=\"https://chainlist.org\" target=\"_blank\" rel=\"noreferrer\">Chainlist</a> to load the Polygon Blockchain ID into Metamask. </p></li>\n      <li><p>Go back to Metamask and switch to the Polygon Blockchain in the chain drop down menu. </p></li>\n      <li><p>Tokens will be visible that were previously on the Polygon Blockchain and bridged tokens will arrive once the transaction has completed.</p></li>\n    </ul>\n    </Accordion>\n    <Accordion title=\"2. Mint\">\n      <ul>\n        <li><p>Once Matic tokens are available, it is time to put together your Cookie Box. </p></li>\n        <li><p>Enter The Cookie Box </p></li>\n        <li><p>Select the quantity of each cookie and perform mints for each. </p></li>\n        <li><p>Mint a box for frens!!!</p></li>\n      </ul>\n    </Accordion>\n    <Accordion title=\"3. Tweet = Recipes\">\n      <ul>\n        <li>Tweet at @cheffo_nft with a picture of your NFT card (token ids recorded)</li>\n        <li>Receive a DM password to enter that particular Cookie Room.</li>\n        <li>Go to cheffo.io and choose which cookie Room to enter</li>\n        <li>Click button and enter password</li>\n        <li>Enjoy a Recipe PDF for that particular NFT as well as other content will become available, including community gallaries of cookies made.</li>\n        <li>Collect all four cards and complete #thecookieboxnft </li>\n      </ul>\n    </Accordion>\n  </div>\n)","import { React, useState, useEffect } from \"react\";\nimport { Connect } from \"./connect\";\nimport { MintCard } from \"./components/mintCard\"\nimport { FAQ } from \"./components/accordion\"\nimport SmartContract from \"./assets/Gingerbread_Rockets.json\";\nimport SmartContract2 from \"./assets/Milky_Way_Moons.json\";\nimport SmartContract3 from \"./assets/Mexican_Wedding_Rock.json\";\nimport SmartContract4 from \"./assets/Space_Dust_Ufos.json\";\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\n\nfunction App() {\n  const [userState, setUserState] = useState('INTRO');\n\n  const appContent = () => {\n    if (userState !== 'ENTER') {\n      return <Connect userState={userState} setUserState={setUserState} />\n    } else {\n      return (\n        <>\n          <div class=\"section hero\">\n          <img alt=\"Cookie box\" src=\"https://images.squarespace-cdn.com/content/v1/617ce6e6e7be6e72e51086cc/b926389b-1ea7-4b14-a935-0908171b104f/cookie+box+logo-+2.png?format=2500w\"/>\n          </div>\n          <div id=\"mint\" class=\"section mint\">\n            <h2>Select a Cookie</h2>\n            <h4 class=\"subtext\">Launch 12/21  |  Quantity 4321 Each  |  5 second Gifs  |  IPFS hosted  |  ERC721  |  2 MATIC Each | Discord = Recipe </h4>\n            <div className=\"grid\">\n              <MintCard setUserState={setUserState} SmartContract={SmartContract} img=\"https://images.squarespace-cdn.com/content/v1/617ce6e6e7be6e72e51086cc/1639905570476-A61K7SCHIUSPT5K1W7MW/Gingerbread-Rocket.png\"/>\n              <MintCard setUserState={setUserState} SmartContract={SmartContract2} img=\"https://images.squarespace-cdn.com/content/v1/617ce6e6e7be6e72e51086cc/1639905570950-ODPAHADURHWJFEVE0OZS/Milky-Way-Moons.png\"/>\n              <MintCard setUserState={setUserState} SmartContract={SmartContract3} img=\"https://images.squarespace-cdn.com/content/v1/617ce6e6e7be6e72e51086cc/1639905572332-GPDY8XN0F5JTQQYDPYWP/Mexican-Wedding-Rock.png\"/>\n              <MintCard setUserState={setUserState} SmartContract={SmartContract4} img=\"https://images.squarespace-cdn.com/content/v1/617ce6e6e7be6e72e51086cc/1639905572169-EBOGMUMPCCWRVH7P6T7Q/Space-Dust-UFOs.png\"/>\n            </div>\n          </div>\n          <div class=\"section faq\">\n            <h2>Instructions</h2>\n            <FAQ />\n          </div>\n        </>\n      )\n    }\n  }\n\n  return (\n    <>\n      <div class=\"app\">\n        <nav class=\"nav-bar\">\n          <a href=\"https://www.cheffo.io\">\n            <img src=\"//images.squarespace-cdn.com/content/v1/617ce6e6e7be6e72e51086cc/eba1e465-5a01-4493-8116-a255d434b9fa/CHEFFO+LOGO.png?format=1500w\" alt=\"CHEFFO\" class=\"logo\"/>\n          </a>\n          <ol>\n            <li class=\"link\"><a href=\"/\">COOKIE BOX</a></li>\n            <li class=\"link\"><a href=\"https://www.cheffo.io/nft\">V1</a></li>\n            <li class=\"link\"><a href=\"https://www.cheffo.io/restaurant\">RESTAURANT</a></li>\n            <li class=\"link\"><a href=\"https://www.cheffo.io/cheffo-roadmap\">MAP</a></li>\n          </ol>\n          <a href=\"https://cheffomint.live/\" class=\"link mint-button\"><span class=\"btn\" >V1 MINT</span></a>\n        </nav>\n        {appContent()}      \n      </div>\n      <footer class=\"footer\">\n        <img src=\"//images.squarespace-cdn.com/content/v1/617ce6e6e7be6e72e51086cc/eba1e465-5a01-4493-8116-a255d434b9fa/CHEFFO+LOGO.png?format=1500w\" alt=\"CHEFFO\" class=\"logo\"/>\n        <h4>Copyright 2021©</h4>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./styles/reset.css\";\nimport \"./styles/theme.css\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}